import type { MenstrualCycle, PregnancyProfile, VaccinationSchedule, SymptomsDiary } from '../types/phase2Types';

export interface ExportData {
  cycles?: MenstrualCycle[];
  pregnancyProfile?: PregnancyProfile;
  symptoms?: SymptomsDiary[];
  vaccinations?: VaccinationSchedule[];
  exportDate: string;
  userName: string;
}

export const exportToCSV = (data: ExportData, type: 'cycles' | 'symptoms' | 'vaccinations' | 'all') => {
  let csvContent = '';
  let filename = '';

  switch (type) {
    case 'cycles':
      csvContent = generateCyclesCSV(data.cycles || []);
      filename = `menstrual-cycles-${data.exportDate}.csv`;
      break;
    case 'symptoms':
      csvContent = generateSymptomsCSV(data.symptoms || []);
      filename = `symptoms-diary-${data.exportDate}.csv`;
      break;
    case 'vaccinations':
      csvContent = generateVaccinationsCSV(data.vaccinations || []);
      filename = `vaccinations-${data.exportDate}.csv`;
      break;
    case 'all':
      csvContent = generateAllDataCSV(data);
      filename = `health-data-${data.exportDate}.csv`;
      break;
  }

  downloadFile(csvContent, filename, 'text/csv');
};

export const exportToPDF = async (data: ExportData, type: 'summary' | 'detailed') => {
  const htmlContent = type === 'summary' ? generateSummaryHTML(data) : generateDetailedHTML(data);
  
  // Create a temporary window for printing
  const printWindow = window.open('', '_blank');
  if (!printWindow) return;

  printWindow.document.write(`
    <!DOCTYPE html>
    <html>
      <head>
        <title>AroSense Health Report</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 10px; }
          .section { margin-bottom: 25px; }
          .section h2 { color: #333; border-bottom: 1px solid #ccc; padding-bottom: 5px; }
          table { width: 100%; border-collapse: collapse; margin-top: 10px; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #f5f5f5; }
          .status-active { color: #16a34a; font-weight: bold; }
          .status-overdue { color: #dc2626; font-weight: bold; }
          .footer { margin-top: 30px; text-align: center; font-size: 12px; color: #666; }
        </style>
      </head>
      <body>
        ${htmlContent}
        <div class="footer">
          <p>Generated by AroSense on ${new Date().toLocaleDateString()}</p>
          <p>This report contains personal health information. Keep confidential.</p>
        </div>
      </body>
    </html>
  `);

  printWindow.document.close();
  
  // Wait for content to load, then print
  setTimeout(() => {
    printWindow.print();
    printWindow.close();
  }, 500);
};

const generateCyclesCSV = (cycles: MenstrualCycle[]): string => {
  const headers = ['Date', 'Start Date', 'End Date', 'Cycle Length', 'Flow Intensity', 'Notes'];
  const rows = cycles.map(cycle => [
    new Date(cycle.start_date).toLocaleDateString(),
    cycle.start_date,
    cycle.end_date || '',
    cycle.cycle_length?.toString() || '',
    cycle.flow_intensity || '',
    cycle.notes || ''
  ]);

  return [headers, ...rows].map(row => 
    row.map(cell => `"${cell}"`).join(',')
  ).join('\n');
};

const generateSymptomsCSV = (symptoms: SymptomsDiary[]): string => {
  const headers = ['Date', 'Symptoms', 'Mood', 'Energy Level', 'Notes'];
  const rows = symptoms.map(symptom => [
    new Date(symptom.log_date).toLocaleDateString(),
    symptom.symptoms?.join('; ') || '',
    symptom.mood || '',
    symptom.energy_level?.toString() || '',
    symptom.notes || ''
  ]);

  return [headers, ...rows].map(row => 
    row.map(cell => `"${cell}"`).join(',')
  ).join('\n');
};

const generateVaccinationsCSV = (vaccinations: VaccinationSchedule[]): string => {
  const headers = ['Vaccine Name', 'Due Date', 'Administered Date', 'Administered By', 'Status', 'Notes'];
  const rows = vaccinations.map(vaccine => [
    vaccine.vaccine_name,
    new Date(vaccine.due_date).toLocaleDateString(),
    vaccine.administered_date ? new Date(vaccine.administered_date).toLocaleDateString() : '',
    vaccine.administered_by || '',
    vaccine.is_completed ? 'Completed' : 'Pending',
    vaccine.notes || ''
  ]);

  return [headers, ...rows].map(row => 
    row.map(cell => `"${cell}"`).join(',')
  ).join('\n');
};

const generateAllDataCSV = (data: ExportData): string => {
  let content = `AroSense Health Data Export\nGenerated: ${data.exportDate}\nUser: ${data.userName}\n\n`;
  
  if (data.cycles && data.cycles.length > 0) {
    content += 'MENSTRUAL CYCLES\n';
    content += generateCyclesCSV(data.cycles) + '\n\n';
  }
  
  if (data.symptoms && data.symptoms.length > 0) {
    content += 'SYMPTOMS DIARY\n';
    content += generateSymptomsCSV(data.symptoms) + '\n\n';
  }
  
  if (data.vaccinations && data.vaccinations.length > 0) {
    content += 'VACCINATIONS\n';
    content += generateVaccinationsCSV(data.vaccinations) + '\n\n';
  }

  return content;
};

const generateSummaryHTML = (data: ExportData): string => {
  return `
    <div class="header">
      <h1>AroSense Health Summary</h1>
      <p><strong>${data.userName}</strong> | ${data.exportDate}</p>
    </div>

    ${data.cycles && data.cycles.length > 0 ? `
    <div class="section">
      <h2>Menstrual Health Summary</h2>
      <p><strong>Total Cycles Tracked:</strong> ${data.cycles.length}</p>
      <p><strong>Average Cycle Length:</strong> ${Math.round(data.cycles.reduce((sum, c) => sum + (c.cycle_length || 28), 0) / data.cycles.length)} days</p>
      <p><strong>Last Period:</strong> ${new Date(data.cycles[0].start_date).toLocaleDateString()}</p>
    </div>
    ` : ''}

    ${data.pregnancyProfile ? `
    <div class="section">
      <h2>Pregnancy Information</h2>
      <p><strong>Last Menstrual Period:</strong> ${new Date(data.pregnancyProfile.last_menstrual_period).toLocaleDateString()}</p>
      <p><strong>Estimated Due Date:</strong> ${new Date(data.pregnancyProfile.estimated_due_date).toLocaleDateString()}</p>
      <p><strong>Current Week:</strong> ${data.pregnancyProfile.current_week || 'Not specified'}</p>
      <p class="status-active">Status: Active</p>
    </div>
    ` : ''}

    ${data.vaccinations && data.vaccinations.length > 0 ? `
    <div class="section">
      <h2>Vaccination Summary</h2>
      <p><strong>Total Vaccines:</strong> ${data.vaccinations.length}</p>
      <p><strong>Completed:</strong> ${data.vaccinations.filter(v => v.is_completed).length}</p>
      <p><strong>Pending:</strong> ${data.vaccinations.filter(v => !v.is_completed).length}</p>
      ${data.vaccinations.filter(v => !v.is_completed && new Date(v.due_date) < new Date()).length > 0 ? 
        `<p class="status-overdue">Overdue: ${data.vaccinations.filter(v => !v.is_completed && new Date(v.due_date) < new Date()).length}</p>` : ''
      }
    </div>
    ` : ''}
  `;
};

const generateDetailedHTML = (data: ExportData): string => {
  let content = `
    <div class="header">
      <h1>AroSense Detailed Health Report</h1>
      <p><strong>${data.userName}</strong> | ${data.exportDate}</p>
    </div>
  `;

  if (data.cycles && data.cycles.length > 0) {
    content += `
      <div class="section">
        <h2>Menstrual Cycles</h2>
        <table>
          <tr><th>Start Date</th><th>End Date</th><th>Length</th><th>Flow</th><th>Notes</th></tr>
          ${data.cycles.map(cycle => `
            <tr>
              <td>${new Date(cycle.start_date).toLocaleDateString()}</td>
              <td>${cycle.end_date ? new Date(cycle.end_date).toLocaleDateString() : 'Ongoing'}</td>
              <td>${cycle.cycle_length || 'N/A'} days</td>
              <td>${cycle.flow_intensity || 'N/A'}</td>
              <td>${cycle.notes || ''}</td>
            </tr>
          `).join('')}
        </table>
      </div>
    `;
  }

  if (data.vaccinations && data.vaccinations.length > 0) {
    content += `
      <div class="section">
        <h2>Vaccination Records</h2>
        <table>
          <tr><th>Vaccine</th><th>Due Date</th><th>Status</th><th>Administered</th><th>Provider</th></tr>
          ${data.vaccinations.map(vaccine => `
            <tr>
              <td>${vaccine.vaccine_name}</td>
              <td>${new Date(vaccine.due_date).toLocaleDateString()}</td>
              <td class="${vaccine.is_completed ? 'status-active' : 'status-overdue'}">${vaccine.is_completed ? 'Completed' : 'Pending'}</td>
              <td>${vaccine.administered_date ? new Date(vaccine.administered_date).toLocaleDateString() : 'N/A'}</td>
              <td>${vaccine.administered_by || 'N/A'}</td>
            </tr>
          `).join('')}
        </table>
      </div>
    `;
  }

  return content;
};

const downloadFile = (content: string, filename: string, mimeType: string) => {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};